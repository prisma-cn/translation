(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{102:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return s}));var n=a(1),r=a(6),i=(a(0),a(115)),c={},p={id:"getting-started/start-from-scratch-with-empty-db/quickstart-sql",title:"quickstart-sql",description:"# Quickstart: SQL ",source:"@site/docs/getting-started/start-from-scratch-with-empty-db/quickstart-sql.md",permalink:"/docs/getting-started/start-from-scratch-with-empty-db/quickstart-sql",editUrl:"https://github.com/prisma/prisma2/edit/master/website/docs/getting-started/start-from-scratch-with-empty-db/quickstart-sql.md"},o=[{value:"Overview",id:"overview",children:[]},{value:"PostgreSQL",id:"postgresql",children:[]},{value:"MySQL",id:"mysql",children:[]},{value:"SQLite",id:"sqlite",children:[]}],l={rightToc:o};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"quickstart-sql"},"Quickstart: SQL"),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("p",null,"Select your database to get started:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#postgresql"}),"PostgreSQL")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#mysql"}),"MySQL")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#sqlite"}),"SQLite"))),Object(i.b)("h2",{id:"postgresql"},"PostgreSQL"),Object(i.b)("p",null,"Follow these steps for an initial Prisma setup:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"mkdir hello-prisma")," to create your project directory")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"cd hello-prisma")," to navigate into it")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.prisma")," to create an empty ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../prisma-schema-file.md"}),"Prisma schema"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"datasource")," to the Prisma schema and set your database connection string as the ",Object(i.b)("inlineCode",{parentName:"p"},"url"),", e.g.:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'datasource db {\n  provider = "postgresql"\n  url      = "postgresql://janedoe:janedoe@localhost:5432/hello-prisma"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.sql")," to create your SQL schema and add the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),'CREATE TABLE "public"."User" (\n  user_id SERIAL PRIMARY KEY NOT NULL,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE "public"."Post" (\n  post_id SERIAL PRIMARY KEY NOT NULL,\n  -- created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  title VARCHAR(255) NOT NULL,\n  content TEXT,\n  author_id INTEGER,\n  FOREIGN KEY (author_id) REFERENCES "public"."User"(user_id)\n);\n\nCREATE TABLE "public"."Profile" (\n  profile_id SERIAL PRIMARY KEY NOT NULL,\n  bio TEXT,\n  user_id INTEGER NOT NULL,\n  FOREIGN KEY (user_id) REFERENCES "public"."User"(user_id)\n);\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the following command to migrate your database schema:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"psql -h __HOST__ -d __DATABASE__ -U __USER__ -f schema.sql\n")),Object(i.b)("p",{parentName:"li"},"Note that you need to replace the uppercase placeholders with your database credentials, e.g.:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"psql -h localhost -d hello-prisma -U janedoe -f schema.sql \n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," to the Prisma schema to be able to generate Prisma Client:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'generator client {\n  provider = "prisma-client-js"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Configure project (TypeScript):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"npm init -y\nnpm install typescript ts-node prisma2 --save-dev\nnpm install @prisma/client\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 introspect")," to introspect your database and add your models to the Prisma schema")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 generate")," to generate Prisma Client")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch tsconfig.json")," and the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "sourceMap": true,\n    "outDir": "dist",\n    "strict": true,\n    "lib": ["esnext", "dom"],\n    "esModuleInterop": true\n  }\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch index.ts")," to create a source file and add the following code:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\n// A `main` function so that we can use async/await\nasync function main() {\n  const user1 = await prisma.user.create({\n    data: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n      posts: {\n        create: {\n          title: 'Watch the talks from Prisma Day 2019',\n          content: 'https://www.prisma.io/blog/z11sg6ipb3i1/',\n        },\n      },\n    },\n    include: {\n      posts: true,\n    },\n  })\n  console.log(user1)\n}\n\nmain()\n  .catch(e => console.error(e))\n  .finally(async () => {\n    await prisma.disconnect()\n  })\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx ts-node index.ts")," to execute the script"))),Object(i.b)("h2",{id:"mysql"},"MySQL"),Object(i.b)("p",null,"Follow these steps for an initial Prisma setup:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"mkdir hello-prisma")," to create your project directory")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"cd hello-prisma")," to navigate into it")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.prisma")," to create an empty ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../prisma-schema-file.md"}),"Prisma schema"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"datasource")," to the Prisma schema and set your database connection string as the ",Object(i.b)("inlineCode",{parentName:"p"},"url"),", e.g.:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'datasource db {\n  provider = "mysql"\n  url      = "mysql://root:admin@localhost:3306/hello-prisma"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.sql")," to create your SQL schema and add the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE User (\n  user_id BIGINT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  PRIMARY KEY (user_id)\n);\n\nCREATE TABLE Post (\n  post_id BIGINT NOT NULL AUTO_INCREMENT,\n  -- created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  title VARCHAR(255) NOT NULL,\n  content TEXT,\n  author_id BIGINT,\n  PRIMARY KEY (post_id),\n  FOREIGN KEY (author_id) REFERENCES User(user_id)\n);\n\nCREATE TABLE Profile (\n  profile_id BIGINT NOT NULL AUTO_INCREMENT,\n  bio TEXT,\n  user_id BIGINT NOT NULL,\n  PRIMARY KEY (profile_id),\n  FOREIGN KEY (user_id) REFERENCES User(user_id)\n);\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the following command to migrate your database schema:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"mysql -u __USER__ -p __DATABASE__ < schema.sql\n")),Object(i.b)("p",{parentName:"li"},"Note that you need to replace the uppercase placeholders with your database credentials, e.g.:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"mysql -u root -p hello-prisma < schema.sql  \n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," to the Prisma schema to be able to generate Prisma Client:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'generator client {\n  provider = "prisma-client-js"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Configure project (TypeScript):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"npm init -y\nnpm install typescript ts-node prisma2 --save-dev\nnpm install @prisma/client\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 introspect")," to introspect your database and add your models to the Prisma schema")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 generate")," to generate Prisma Client")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch tsconfig.json")," and the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "sourceMap": true,\n    "outDir": "dist",\n    "strict": true,\n    "lib": ["esnext", "dom"],\n    "esModuleInterop": true\n  }\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch index.ts")," to create a source file and add the following code:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\n// A `main` function so that we can use async/await\nasync function main() {\n  const user1 = await prisma.user.create({\n    data: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n      posts: {\n        create: {\n          title: 'Watch the talks from Prisma Day 2019',\n          content: 'https://www.prisma.io/blog/z11sg6ipb3i1/',\n        },\n      },\n    },\n    include: {\n      posts: true,\n    },\n  })\n  console.log(user1)\n}\n\nmain()\n  .catch(e => console.error(e))\n  .finally(async () => {\n    await prisma.disconnect()\n  })\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx ts-node index.ts")," to execute the script"))),Object(i.b)("h2",{id:"sqlite"},"SQLite"),Object(i.b)("p",null,"Follow these steps for an initial Prisma setup:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"mkdir hello-prisma")," to create your project directory")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"cd hello-prisma")," to navigate into it")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.prisma")," to create an empty ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"../../prisma-schema-file.md"}),"Prisma schema"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"datasource")," to the Prisma schema and set your database connection string as the ",Object(i.b)("inlineCode",{parentName:"p"},"url"),", e.g.:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'datasource db {\n  provider = "sqlite"\n  url      = "sqlite:./hello-prisma.db"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch schema.sql")," to create your SQL schema and add the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE User (\n  user_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  name VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE Post (\n  post_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  -- created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  title VARCHAR(255) NOT NULL,\n  content TEXT,\n  author_id INTEGER,\n  FOREIGN KEY (author_id) REFERENCES User(user_id)\n);\n\nCREATE TABLE Profile (\n  profile_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  bio TEXT,\n  user_id INTEGER NOT NULL,\n  FOREIGN KEY (user_id) REFERENCES User(user_id)\n);\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run the following command to create your SQLite database file from ",Object(i.b)("inlineCode",{parentName:"p"},"schema.sql"),":"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"sqlite3 hello-prisma.db < schema.sql \n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Add a ",Object(i.b)("inlineCode",{parentName:"p"},"generator")," to the Prisma schema to be able to generate Prisma Client:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-prisma"}),'generator client {\n  provider = "prisma-client-js"\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Configure project (TypeScript):"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"npm init -y\nnpm install typescript ts-node prisma2 --save-dev\nnpm install @prisma/client\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 introspect")," to introspect your database and add your models to the Prisma schema")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx prisma2 generate")," to generate Prisma Client")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch tsconfig.json")," and the following contents to it:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "sourceMap": true,\n    "outDir": "dist",\n    "strict": true,\n    "lib": ["esnext", "dom"],\n    "esModuleInterop": true\n  }\n}\n'))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"touch index.ts")," to create a source file and add the following code:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\n// A `main` function so that we can use async/await\nasync function main() {\n  const user1 = await prisma.user.create({\n    data: {\n      email: 'alice@prisma.io',\n      name: 'Alice',\n      posts: {\n        create: {\n          title: 'Watch the talks from Prisma Day 2019',\n          content: 'https://www.prisma.io/blog/z11sg6ipb3i1/',\n        },\n      },\n    },\n    include: {\n      posts: true,\n    },\n  })\n  console.log(user1)\n}\n\nmain()\n  .catch(e => console.error(e))\n  .finally(async () => {\n    await prisma.disconnect()\n  })\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Run ",Object(i.b)("inlineCode",{parentName:"p"},"npx ts-node index.ts")," to execute the script"))))}s.isMDXComponent=!0}}]);